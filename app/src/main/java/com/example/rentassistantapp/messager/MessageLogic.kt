package com.example.rentassistantapp.messager

import androidx.lifecycle.ViewModel
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import java.text.SimpleDateFormat
import java.util.*

// Fully generated by LLM. Should be revised, may include critical bugs
class ChatViewModel : ViewModel() {

    // Приватный изменяемый список. Его может менять только ViewModel.
    private val _messages = MutableStateFlow<List<Message>>(emptyList())
    // Публичный, доступный только для чтения список. На него будет подписываться наш UI.
    val messages = _messages.asStateFlow()

    init {
        // Загружаем какие-то начальные сообщения при создании ViewModel
        _messages.value = listOf(
            Message("1", "Здравствуйте! Чем мы можем вам помочь?", "15:30", false),
            Message("2", "Добрый день, у меня проблема с оплатой.", "15:31", true)
        )
    }

    // Этот публичный метод будет вызывать наш UI
    fun sendMessage(text: String) {
        // Форматируем текущее время для timestamp
        val currentTime = SimpleDateFormat("HH:mm", Locale.getDefault()).format(Date())

        // Создаем новый объект сообщения
        val newMessage = Message(
            id = UUID.randomUUID().toString(), // Генерируем уникальный ID
            text = text,
            timestamp = currentTime,
            isSentByUser = true
        )

        // Добавляем новое сообщение в конец списка.
        // Важно создавать новый список (через +), чтобы StateFlow заметил изменение.
        _messages.value = _messages.value + newMessage

        // TODO: В будущем здесь будет код для отправки сообщения на сервер
        // и, возможно, симуляция ответа от поддержки.
    }
}
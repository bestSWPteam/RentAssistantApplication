# Tech Stack

This document describes the technologies used in the system: the Telegram Bot, Android App, and FastAPI backend.

---

## 1. **Backend API (FastAPI)**

- **Framework:** FastAPI
- **Language:** Python 3.11+
- **Database:** PostgreSQL (cloud-managed)
- **ORM:** SQLAlchemy 2.x (async support)
- **DB driver:** asyncpg
- **Environment config:** pydantic-settings + `.env`
- **HTTP Client:** httpx
- **Payments:** YooKassa SDK (`yookassa`)
- **Auth:**
  - JWT tokens for user sessions
  - `X-Auth-Key` header for admin-only routes
- **Endpoints:**
  - `/users/`, `/tasks/`, `/subscriptions/`, `/auth/`, `/assistant-statistics/`, `/yookassa/`
- **Shared packages:**
  - `pydantic` 2.x for schema validation
  - `PyYAML` for optional config parsing

---

## 2. **Telegram Bot**

- **Framework:** aiogram 3.20 (async, modern)
- **Language:** Python 3.11+
- **Bot Runner:** Polling (no webhooks)
- **HTTP Communication:** httpx (to backend)
- **No database connection:** all persistent logic is handled via backend
- **Environment config:** pydantic-settings
- **Payment flow:** via backend endpoints (`/yookassa/create-payment`)
- **Admin features:** available through the bot with admin key usage

---

## 3. **Android App**

- **Language:** Kotlin
- **Framework:** Jetpack Compose
- **Networking:**
  - `Retrofit` for REST API communication
  - `OkHttp` for low-level HTTP
- **Auth:**
  - Telegram WebApp login
  - Receives JWT token from backend (`/auth/status/{code}`)
- **Architecture Components:**
  - `ViewModel` for logic/state
  - `LiveData` or `StateFlow` for UI updates
  - `Navigation-Compose` for screen transitions
- **Image loading:** `Coil` (optional)
- **DI (if any):** likely `Hilt` or manual DI
- **Local Storage:** minimal or none — all data comes from the backend

---

## 4. **Database (PostgreSQL)**

- **Connected only to:** FastAPI backend
- **Access via:** SQLAlchemy + asyncpg
- **Models include:**
  - `User`, `Task`, `Subscription`, `AssistantStatistics`, `PaymentLog`
- **All access is async** and performed in service/crud layers

---

## 5. **Payment Gateway (YooKassa)**

- **SDK:** yookassa 3.5
- **Flow:**
  - API sends HTTPS request to YooKassa
  - YooKassa handles confirmation and redirect
- **Integration used in both:**
  - Telegram bot (through backend)
  - Android App (via backend as well)

---

## 6. **Common Python Libraries**

These libraries are used in both bot and backend:

| Library           | Purpose                                |
|-------------------|----------------------------------------|
| `aiogram`         | Async Telegram bot framework           |
| `httpx`           | Async HTTP client                      |
| `SQLAlchemy 2.x`  | Async ORM                              |
| `asyncpg`         | High-performance PostgreSQL driver     |
| `pydantic`        | Data validation and typing             |
| `pydantic-settings` | Config via `.env`                    |
| `yookassa`        | Payment gateway SDK                    |
| `PyYAML`          | Config parsing (optional)              |

---

## 7. **Deployment & Architecture Notes**

- **Bot:** runs as a separate polling-based service, not tied to webhooks
- **App:** installed on Android devices, works over HTTPS
- **Backend:** exposed to the internet, receives requests from both
- **Database:** hosted separately and accessed only by the backend
- **Communication:** all inter-component interactions use secure HTTP APIs

---

## Summary

| Component       | Language | Runtime     | Interfaces           | DB Access | Auth             |
|----------------|----------|-------------|----------------------|-----------|------------------|
| Telegram Bot   | Python   | Asyncio     | FastAPI API (httpx)  | ❌        | X-Auth-Key (admin)|
| Android App    | Kotlin   | Jetpack     | FastAPI API (Retrofit) | ❌      | JWT              |
| Backend (API)  | Python   | FastAPI + asyncpg | DB, Bot, App, YooKassa | ✅| JWT + Admin Key |
| PostgreSQL     | SQL      | Cloud DB    | Async ORM            | ✅        | –                |


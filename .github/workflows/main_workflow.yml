name: CI/CD NGINX Demo

on:
  push:
    branches: [ "main", "RishatShay-patch-1" ]

jobs:
  code-analysis:
    name: Analyze Source Code
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Сборка и пуш образа теперь зависят от тестов
  build_and_push:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: run-tests # <--- ЗАВИСИМОСТЬ ОТ ТЕСТОВ
    permissions:
      contents: read
      packages: write
    outputs:
      image_name: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CI_CD_Token }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  # Сканирование образа Trivy (ваш старый тест)
  scan_image:
    name: Scan Image for Vulnerabilities
    runs-on: ubuntu-latest
    needs: build_and_push
    permissions:
      contents: read
      packages: read
      security-events: write
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CI_CD_Token }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build_and_push.outputs.image_name }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          exit-code: '1'
          github-pat: ${{ secrets.CI_CD_Token }}
      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
